pipeline {
    agent {
        docker {
            image 'python:3.10'
            args '-v /var/run/docker.sock:/var/run/docker.sock -u root:root'
        }
    }

    environment {
        GITHUB_CREDENTIALS = 'github-pat'
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'
        DOCKER_IMAGE_NAME = 'messaging-app-j'
        PROJECT_PATH = 'messaging_app'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    credentialsId: "${GITHUB_CREDENTIALS}",
                    url: 'https://github.com/loutimi/alx-backend-python.git'
            }
        }

        stage('Verify Environment') {
            steps {
                sh '''
                    echo "=== Checking Python ==="
                    python3 --version
                    pip --version

                    echo "=== Checking Docker ==="
                    docker --version
                    docker ps -a
                '''
            }
        }

        stage('Setup Environment') {
            steps {
                dir("${PROJECT_PATH}") {
                    sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install --upgrade pip
                        pip install -r requirements.txt
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir("${PROJECT_PATH}") {
                    sh '''
                        . venv/bin/activate
                        pytest --junitxml=test-results.xml --cov=. --cov-report=xml
                    '''
                }
            }
            post {
                always {
                    publishTestResults testResultsPattern: "${PROJECT_PATH}/test-results.xml"
                    publishCoverage adapters: [coberturaAdapter("${PROJECT_PATH}/coverage.xml")], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir("${PROJECT_PATH}") {
                    script {
                        def image = docker.build("${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}")
                        docker.withRegistry('https://registry.hub.docker.com', "${DOCKERHUB_CREDENTIALS}") {
                            image.push()
                            image.push("latest")
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
