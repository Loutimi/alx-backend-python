pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = 'github-credentials'
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'
        DOCKER_IMAGE = 'messaging-app-j'
        DOCKER_TAG = "${BUILD_NUMBER}"
        DOCKER_REPO = 'loutimi'
        PYTHON_VERSION = '3.11'
    }

    stages {
        stage('Clean Workspace') {
            steps { deleteDir() }
        }

        stage('Checkout') {
            steps {
                git branch: 'main',
                    credentialsId: "${GITHUB_CREDENTIALS}",
                    url: 'https://github.com/Loutimi/alx-backend-python.git'
            }
        }

        stage('Setup Python Environment') {
            steps {
                sh '''
                    python3 --version
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                '''
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    . venv/bin/activate
                    pip install -r messaging_app/requirements.txt || true
                    pip install pytest pytest-html pytest-cov python-dotenv Django
                '''
            }
        }

        stage('Run Tests') {
            steps {
                withCredentials([file(credentialsId: 'messaging-app-env', variable: 'ENV_FILE')]) {
                    sh '''
                        . venv/bin/activate
                        cd messaging_app
                        mkdir -p reports reports/coverage
                        python - <<END
import os
from dotenv import load_dotenv
import django
import pytest

load_dotenv("${ENV_FILE}")
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "messaging_app.settings")
django.setup()

pytest.main([
    "../chats/tests.py",
    "--html=reports/pytest_report.html",
    "--self-contained-html",
    "--cov=messaging_app",
    "--cov-report=xml",
    "--cov-report=html:reports/coverage",
    "--junitxml=reports/junit.xml"
])
END
                    '''
                }
            }
            post {
                always {
                    junit 'reports/junit.xml'
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'reports',
                        reportFiles: 'pytest_report.html',
                        reportName: 'PyTest Report'
                    ])
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'reports/coverage',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    sh 'docker --version || (echo "Docker not found" && exit 1)'

                    def dockerImage = docker.build("${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG}", "./messaging_app")
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS}") {
                        sh """
                        docker tag ${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_REPO}/${DOCKER_IMAGE}:latest
                        docker push ${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG}
                        docker push ${DOCKER_REPO}/${DOCKER_IMAGE}:latest
                        """
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                sh '''
                    docker rmi -f $(docker images -q ${DOCKER_REPO}/${DOCKER_IMAGE}) || true
                    docker system prune -f || true
                '''
            }
        }
    }

    post {
        always { echo 'Pipeline completed!' }
        success { echo "Docker image pushed successfully: ${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG}" }
        failure { echo 'Pipeline failed!' }
    }
}
