pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = 'github-pat'
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'
        PYTHON_VERSION = '3.10'
        DOCKER_IMAGE = 'messaging-app-j'
        DOCKER_TAG = "${BUILD_NUMBER}"
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_REPO = 'loutimi'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Pulling source code from GitHub...'
                
                git branch: 'main',
                    credentialsId: "${GITHUB_CREDENTIALS}",
                    url: 'https://github.com/Loutimi/alx-backend-python.git'
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                echo 'Setting up Python environment...'
                sh '''
                    # Update package list and install Python if not available
                    apt-get update || echo "Package manager not found, continuing..."
                    
                    # Try to install Python
                    if ! command -v python3 &> /dev/null; then
                        echo "Installing Python3..."
                        apt-get install -y python3 python3-pip python3-venv || echo "Could not install Python3"
                    fi
                    
                    # Verify Python installation
                    python3 --version
                    
                    # Create virtual environment
                    python3 -m venv venv
                    . venv/bin/activate
                    
                    # Upgrade pip
                    python3 -m pip install --upgrade pip
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing dependencies...'
                sh '''
                    . venv/bin/activate
                    if [ -f messaging_app/requirements.txt ]; then
                        pip3 install -r messaging_app/requirements.txt
                    fi
                    pip3 install pytest pytest-html pytest-cov
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running tests with pytest...'
                sh '''
                    . venv/bin/activate
                    mkdir -p reports
                    pytest messaging_app/tests \
                        --html=reports/pytest_report.html --self-contained-html \
                        --cov=messaging_app --cov-report=xml \
                        --cov-report=html:reports/coverage \
                        --junitxml=reports/junit.xml
                '''
            }
            post {
                always {
                    // Archive test results
                    junit 'reports/junit.xml'
                    
                    // Archive HTML reports
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'reports',
                        reportFiles: 'pytest_report.html',
                        reportName: 'PyTest Report'
                    ])
                    
                    // Archive coverage report
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'reports/coverage',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                }
            }
        }
        
        stage('Generate Report') {
            steps {
                echo 'Test reports generated successfully!'
                archiveArtifacts artifacts: 'reports/**/*', fingerprint: true
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    // Build the Docker image
                    def dockerImage = docker.build("${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG}", "./messaging_app")
                    
                    // Tag as latest as well
                    sh "docker tag ${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_REPO}/${DOCKER_IMAGE}:latest"
                    
                    // Store the image for use in push stage
                    env.DOCKER_IMAGE_FULL = "${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                echo 'Pushing Docker image to registry...'
                script {
                    // Use Docker Hub credentials
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS}") {
                        // Push both tagged and latest versions
                        sh "docker push ${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                        sh "docker push ${DOCKER_REPO}/${DOCKER_IMAGE}:latest"
                    }
                }
            }
            post {
                success {
                    echo "Successfully pushed Docker image: ${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
                failure {
                    echo 'Failed to push Docker image'
                }
            }
        }
        
        stage('Cleanup Docker Images') {
            steps {
                echo 'Cleaning up local Docker images...'
                sh '''
                    # Clean up Docker images to save space
                    docker rmi -f $(docker images -q ${DOCKER_REPO}/${DOCKER_IMAGE}) || true
                    docker system prune -f || true
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed!'
        }
        success {
            echo 'Pipeline succeeded!'
            echo "Docker image pushed successfully: ${DOCKER_REPO}/${DOCKER_IMAGE}:${DOCKER_TAG}"
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}